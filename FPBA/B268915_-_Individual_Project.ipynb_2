{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "53cd7b75",
   "metadata": {},
   "source": [
    "# Business Question \n",
    "\"How do customer demographics (families against non-families) affect the duration of hotel stays\"\n",
    "I am interested in finding whether families stay longer at hotels, to help them to adapt plans and packages targeted at families or individuals. \n",
    "\n",
    "# Relevance \n",
    "This quetsion is valuable information for hotels aiming to improve their customer experience as well as their revenue. Families have different needs from individuals or couples like larger rooms. By understanding whether families stay longer than non-families, hotels can adapt packages and offer discounts on longer stays. This can also help hotels plan more effective marketing campaigns that target families, further improving their occupancy.\n",
    "\n",
    "# Justification of Data \n",
    "The data contains key columns for analysis. This includes  adults, children, and babies for the guest type. Combining these gave the family type column which was distinguishing the 'family' and 'non-family'. The stay duration column was also used, which was another combination between the total number of nights stayed of the week and weekend, which measured the total length of stays for both groups. These were both highly relevant to use to determine and find the results to answer my question. \n",
    "\n",
    "# Findings and Insights\n",
    "The analysis showed that families ended up staying longer on average compared to that of non-family guests. The bar chart illustrates the difference between the two groups, telling taht hotels can benefit from offering family-oriented promotions and longer stay deals to attract more family travelers while retaining the current ones. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42416cf4",
   "metadata": {},
   "source": [
    "# Data overview and preparation\n",
    "\n",
    "The data includes information on hotel bookings, with coloumns on customer demographics and the duration of stay of.\n",
    "The data undergoes manipulation and cleaning to adequately prepare it for analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b7823a78",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import All Necessary Libraries\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f35e47aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load my dataset of hotel bookings\n",
    "df = pd.read_csv('hotel_bookings.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b8b18da7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hotel</th>\n",
       "      <th>is_canceled</th>\n",
       "      <th>lead_time</th>\n",
       "      <th>arrival_date_year</th>\n",
       "      <th>arrival_date_month</th>\n",
       "      <th>arrival_date_week_number</th>\n",
       "      <th>arrival_date_day_of_month</th>\n",
       "      <th>stays_in_weekend_nights</th>\n",
       "      <th>stays_in_week_nights</th>\n",
       "      <th>adults</th>\n",
       "      <th>...</th>\n",
       "      <th>deposit_type</th>\n",
       "      <th>agent</th>\n",
       "      <th>company</th>\n",
       "      <th>days_in_waiting_list</th>\n",
       "      <th>customer_type</th>\n",
       "      <th>adr</th>\n",
       "      <th>required_car_parking_spaces</th>\n",
       "      <th>total_of_special_requests</th>\n",
       "      <th>reservation_status</th>\n",
       "      <th>reservation_status_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>July</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>01/07/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>737.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>July</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>01/07/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>July</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>75.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>02/07/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>July</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>304.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>75.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>02/07/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Resort Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>July</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>240.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>98.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>03/07/2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119389</th>\n",
       "      <td>City Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>August</td>\n",
       "      <td>35.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>394.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>96.14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>06/09/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119390</th>\n",
       "      <td>City Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>August</td>\n",
       "      <td>35.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>225.43</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>07/09/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119391</th>\n",
       "      <td>City Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>August</td>\n",
       "      <td>35.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>157.71</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>07/09/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119392</th>\n",
       "      <td>City Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>August</td>\n",
       "      <td>35.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>89.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>104.40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>07/09/2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119393</th>\n",
       "      <td>City Hotel</td>\n",
       "      <td>0.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>August</td>\n",
       "      <td>35.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No Deposit</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Transient</td>\n",
       "      <td>151.20</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Check-Out</td>\n",
       "      <td>07/09/2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>119394 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               hotel  is_canceled  lead_time  arrival_date_year  \\\n",
       "0       Resort Hotel          0.0      342.0             2015.0   \n",
       "1       Resort Hotel          0.0      737.0             2015.0   \n",
       "2       Resort Hotel          0.0        7.0             2015.0   \n",
       "3       Resort Hotel          0.0       13.0             2015.0   \n",
       "4       Resort Hotel          0.0       14.0             2015.0   \n",
       "...              ...          ...        ...                ...   \n",
       "119389    City Hotel          0.0       23.0             2017.0   \n",
       "119390    City Hotel          0.0      102.0             2017.0   \n",
       "119391    City Hotel          0.0       34.0             2017.0   \n",
       "119392    City Hotel          0.0      109.0             2017.0   \n",
       "119393    City Hotel          0.0      205.0             2017.0   \n",
       "\n",
       "       arrival_date_month  arrival_date_week_number  \\\n",
       "0                    July                      27.0   \n",
       "1                    July                      27.0   \n",
       "2                    July                      27.0   \n",
       "3                    July                      27.0   \n",
       "4                    July                      27.0   \n",
       "...                   ...                       ...   \n",
       "119389             August                      35.0   \n",
       "119390             August                      35.0   \n",
       "119391             August                      35.0   \n",
       "119392             August                      35.0   \n",
       "119393             August                      35.0   \n",
       "\n",
       "        arrival_date_day_of_month  stays_in_weekend_nights  \\\n",
       "0                             1.0                        0   \n",
       "1                             1.0                        0   \n",
       "2                             1.0                        0   \n",
       "3                             1.0                        0   \n",
       "4                             1.0                        0   \n",
       "...                           ...                      ...   \n",
       "119389                       30.0                        2   \n",
       "119390                       31.0                        2   \n",
       "119391                       31.0                        2   \n",
       "119392                       31.0                        2   \n",
       "119393                       29.0                        2   \n",
       "\n",
       "        stays_in_week_nights  adults  ...  deposit_type  agent company  \\\n",
       "0                          0       2  ...    No Deposit    NaN     NaN   \n",
       "1                          0       2  ...    No Deposit    NaN     NaN   \n",
       "2                          1       1  ...    No Deposit    NaN     NaN   \n",
       "3                          1       1  ...    No Deposit  304.0     NaN   \n",
       "4                          2       2  ...    No Deposit  240.0     NaN   \n",
       "...                      ...     ...  ...           ...    ...     ...   \n",
       "119389                     5       2  ...    No Deposit  394.0     NaN   \n",
       "119390                     5       3  ...    No Deposit    9.0     NaN   \n",
       "119391                     5       2  ...    No Deposit    9.0     NaN   \n",
       "119392                     5       2  ...    No Deposit   89.0     NaN   \n",
       "119393                     7       2  ...    No Deposit    9.0     NaN   \n",
       "\n",
       "       days_in_waiting_list customer_type     adr  \\\n",
       "0                         0     Transient    0.00   \n",
       "1                         0     Transient    0.00   \n",
       "2                         0     Transient   75.00   \n",
       "3                         0     Transient   75.00   \n",
       "4                         0     Transient   98.00   \n",
       "...                     ...           ...     ...   \n",
       "119389                    0     Transient   96.14   \n",
       "119390                    0     Transient  225.43   \n",
       "119391                    0     Transient  157.71   \n",
       "119392                    0     Transient  104.40   \n",
       "119393                    0     Transient  151.20   \n",
       "\n",
       "        required_car_parking_spaces  total_of_special_requests  \\\n",
       "0                                 0                          0   \n",
       "1                                 0                          0   \n",
       "2                                 0                          0   \n",
       "3                                 0                          0   \n",
       "4                                 0                          1   \n",
       "...                             ...                        ...   \n",
       "119389                            0                          0   \n",
       "119390                            0                          2   \n",
       "119391                            0                          4   \n",
       "119392                            0                          0   \n",
       "119393                            0                          2   \n",
       "\n",
       "        reservation_status reservation_status_date  \n",
       "0                Check-Out              01/07/2015  \n",
       "1                Check-Out              01/07/2015  \n",
       "2                Check-Out              02/07/2015  \n",
       "3                Check-Out              02/07/2015  \n",
       "4                Check-Out              03/07/2015  \n",
       "...                    ...                     ...  \n",
       "119389           Check-Out              06/09/2017  \n",
       "119390           Check-Out              07/09/2017  \n",
       "119391           Check-Out              07/09/2017  \n",
       "119392           Check-Out              07/09/2017  \n",
       "119393           Check-Out              07/09/2017  \n",
       "\n",
       "[119394 rows x 32 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the data \n",
    "df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0dc16da1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "print(type(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "28082cfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for missing values \n",
    "missing_data = df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6f01a317",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in each coloumn\n",
      "hotel                                  0\n",
      "is_canceled                            6\n",
      "lead_time                              1\n",
      "arrival_date_year                     79\n",
      "arrival_date_month                    79\n",
      "arrival_date_week_number              79\n",
      "arrival_date_day_of_month             79\n",
      "stays_in_weekend_nights                0\n",
      "stays_in_week_nights                   0\n",
      "adults                                 0\n",
      "children                               4\n",
      "babies                                 0\n",
      "meal                                   0\n",
      "country                              488\n",
      "market_segment                         0\n",
      "distribution_channel                   0\n",
      "is_repeated_guest                      0\n",
      "previous_cancellations                 0\n",
      "previous_bookings_not_canceled         0\n",
      "reserved_room_type                     0\n",
      "assigned_room_type                     0\n",
      "booking_changes                        0\n",
      "deposit_type                           0\n",
      "agent                              16340\n",
      "company                           112597\n",
      "days_in_waiting_list                   0\n",
      "customer_type                          0\n",
      "adr                                    8\n",
      "required_car_parking_spaces            0\n",
      "total_of_special_requests              0\n",
      "reservation_status                     0\n",
      "reservation_status_date                0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Display missing values count for each column\n",
    "print(\"Missing values in each coloumn\")\n",
    "print(missing_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "baaa3bc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a Total Duration Stay column \n",
    "df['stay_duration'] = df['stays_in_weekend_nights'] + df['stays_in_week_nights']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "118023d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Deal with relevant missing values \n",
    "# Replacing missing values with 0 in adults, children and babies coloumns\n",
    "df['adults'].fillna(0, inplace=True)\n",
    "df['children'].fillna(0, inplace=True)\n",
    "df['babies'].fillna(0, inplace=True)\n",
    "\n",
    "# Fill missing values in the 'stay_duration' coloumn with the mean value\n",
    "df['stay_duration'].fillna(df['stay_duration'].mean(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a18e285c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Types\n",
      "hotel                              object\n",
      "is_canceled                       float64\n",
      "lead_time                         float64\n",
      "arrival_date_year                 float64\n",
      "arrival_date_month                 object\n",
      "arrival_date_week_number          float64\n",
      "arrival_date_day_of_month         float64\n",
      "stays_in_weekend_nights             int64\n",
      "stays_in_week_nights                int64\n",
      "adults                              int64\n",
      "children                          float64\n",
      "babies                              int64\n",
      "meal                               object\n",
      "country                            object\n",
      "market_segment                     object\n",
      "distribution_channel               object\n",
      "is_repeated_guest                   int64\n",
      "previous_cancellations              int64\n",
      "previous_bookings_not_canceled      int64\n",
      "reserved_room_type                 object\n",
      "assigned_room_type                 object\n",
      "booking_changes                     int64\n",
      "deposit_type                       object\n",
      "agent                             float64\n",
      "company                           float64\n",
      "days_in_waiting_list                int64\n",
      "customer_type                      object\n",
      "adr                               float64\n",
      "required_car_parking_spaces         int64\n",
      "total_of_special_requests           int64\n",
      "reservation_status                 object\n",
      "reservation_status_date            object\n",
      "stay_duration                       int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Check if data types between different demographics are the same \n",
    "print('Data Types')\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c29e47e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert 'children' to match the other demographics \n",
    "df['children'] = df['children'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dd140648",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Types after conversion\n",
      "hotel                              object\n",
      "is_canceled                       float64\n",
      "lead_time                         float64\n",
      "arrival_date_year                 float64\n",
      "arrival_date_month                 object\n",
      "arrival_date_week_number          float64\n",
      "arrival_date_day_of_month         float64\n",
      "stays_in_weekend_nights             int64\n",
      "stays_in_week_nights                int64\n",
      "adults                              int64\n",
      "children                            int64\n",
      "babies                              int64\n",
      "meal                               object\n",
      "country                            object\n",
      "market_segment                     object\n",
      "distribution_channel               object\n",
      "is_repeated_guest                   int64\n",
      "previous_cancellations              int64\n",
      "previous_bookings_not_canceled      int64\n",
      "reserved_room_type                 object\n",
      "assigned_room_type                 object\n",
      "booking_changes                     int64\n",
      "deposit_type                       object\n",
      "agent                             float64\n",
      "company                           float64\n",
      "days_in_waiting_list                int64\n",
      "customer_type                      object\n",
      "adr                               float64\n",
      "required_car_parking_spaces         int64\n",
      "total_of_special_requests           int64\n",
      "reservation_status                 object\n",
      "reservation_status_date            object\n",
      "stay_duration                       int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Confirm that all data are the same data types\n",
    "print('Data Types after conversion')\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "de7ba47f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new column 'family_type' to classify family and non family \n",
    "# Families will have at least one child or baby while non families will be without both \n",
    "df['family_type'] = np.where((df['children'] > 0) | (df['babies'] > 0), 'Family', 'Non-Family')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4760b696",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    adults  children  babies family_type\n",
      "0        2         0       0  Non-Family\n",
      "1        2         0       0  Non-Family\n",
      "2        1         0       0  Non-Family\n",
      "3        1         0       0  Non-Family\n",
      "4        2         0       0  Non-Family\n",
      "5        2         0       0  Non-Family\n",
      "6        2         0       0  Non-Family\n",
      "7        2         0       0  Non-Family\n",
      "8        2         0       0  Non-Family\n",
      "9        2         0       0  Non-Family\n",
      "10       2         0       0  Non-Family\n",
      "11       2         0       0  Non-Family\n",
      "12       2         0       0  Non-Family\n",
      "13       2         1       0      Family\n",
      "14       2         0       0  Non-Family\n",
      "15       2         0       0  Non-Family\n",
      "16       2         0       0  Non-Family\n",
      "17       2         0       0  Non-Family\n",
      "18       2         0       0  Non-Family\n",
      "19       2         0       0  Non-Family\n"
     ]
    }
   ],
   "source": [
    "# Check whether the classification is correct \n",
    "print(df[['adults','children','babies','family_type']].head(20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3950c29e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter the relevant columns  \n",
    "data_sample = df[['adults' , 'children' , 'babies' , 'stay_duration',]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ed78dbc",
   "metadata": {},
   "source": [
    "# Data Analysis\n",
    "The data now undergoes analysis through plotting and creating visualisations to demonstrate results relevant to teh question."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "61abadbe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary of data sample\n",
      "          adults  children     babies  stay_duration\n",
      "count  119394.00  119394.0  119394.00      119394.00\n",
      "mean        1.86       0.1       0.01           3.43\n",
      "std         0.58       0.4       0.10           2.56\n",
      "min         0.00       0.0       0.00           0.00\n",
      "25%         2.00       0.0       0.00           2.00\n",
      "50%         2.00       0.0       0.00           3.00\n",
      "75%         2.00       0.0       0.00           4.00\n",
      "max        55.00      10.0      10.00          69.00\n"
     ]
    }
   ],
   "source": [
    "# Descriptive statistics of data sample\n",
    "print('Summary of data sample')\n",
    "print(data_sample.describe().round(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "28950498",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group the data by family type to compare stay duration\n",
    "grouped_data = df.groupby('family_type')['stay_duration'].mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "247dcc01",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Defining the x and y values \n",
    "x = grouped_data['family_type']\n",
    "y = grouped_data['stay_duration']\n",
    "# Plot of data for Bar Chart analysis\n",
    "plt.bar(grouped_data['family_type'],grouped_data['stay_duration'],width=0.5)\n",
    "\n",
    "# Adding titles and labels \n",
    "plt.title('Average Stay Duration by Family Type')\n",
    "plt.xlabel('Family Type')\n",
    "plt.ylabel('Average Stay Duration(in days)') \n",
    "\n",
    "# Show the plot \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "62dc8259",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  family_type  stay_duration\n",
      "0      Family           3.94\n",
      "1  Non-Family           3.38\n"
     ]
    }
   ],
   "source": [
    "# Demonstrate the pure values of Family and Non-Family \n",
    "print(grouped_data.round(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ed158755",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The difference in stay duration between families and non-families is -0.55 days.\n"
     ]
    }
   ],
   "source": [
    "# Calculating the difference between the pure values\n",
    "stay_duration_difference = grouped_data['stay_duration'].diff().iloc[-1]\n",
    "# Printing the result \n",
    "print(f\"The difference in stay duration between families and non-families is {stay_duration_difference:.2f} days.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bf678d8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
